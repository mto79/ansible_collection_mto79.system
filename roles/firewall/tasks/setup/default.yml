---
- name: "Setup | Remove conflicting software"
  ansible.builtin.package:
    name: "{{ system_firewall_setup_packages_conflicting }}"
    state: "absent"
  when: system_firewall_setup_packages_conflicting is defined
  become: true

- name: "Setup | Install required software"
  ansible.builtin.package:
    name: "{{ system_firewall_setup_packages_required }}"
    state: "present"
  when: system_firewall_setup_packages_required is defined
  become: true

- name: "Setup | Manage ufw"
  when: system_firewall_setup_service == "ufw"
  block:
    - name: "Setup | Manage rules (ufw)"
      community.general.ufw:
        rule: "{{ item.rule | default(system_firewall_setup_default_rule) }}"
        port: "{{ item.name | default(omit) }}"
        proto: "{{ item.protocol | default(system_firewall_setup_default_protocol) }}"
        comment: "{{ item.comment | default(omit) }}"
        direction: "{{ item.direction | default(omit) }}"
        from_ip: "{{ item.from_ip | default(omit) }}"
        to_ip: "{{ item.to_ip | default(omit) }}"
        from_port: "{{ item.from_port | default(omit) }}"
        to_port: "{{ item.to_port | default(omit) }}"
        interface: "{{ item.interface | default(omit) }}"
        route: "{{ item.route | default(false) | bool }}"
        log: "{{ item.log | default(false) | bool }}"
        delete: "{{ item.delete | default(false) | bool }}"
      loop: "{{ system_firewall_setup_  }}"
      when:
        - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
        - system_firewall_setup_  is defined
      become: true

- name: "Setup | Reload firewall (ufw)"
  community.general.ufw:
    state: "reloaded"
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_service == "ufw"
  become: true

- name: "Setup | Open ports (firewalld-port)"
  ansible.posix.firewalld:
    port: "{{ item.name }}/{{ item.protocol | default(system_firewall_setup_default_protocol) }}"
    permanent: true
    state: "enabled"
  loop: "{{ system_firewall_setup_  }}"
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_  is defined
    - system_firewall_setup_service == "firewalld"
    - item.name is number
  loop_control:
    label: "{{ item.name }}"
  notify:
    - "Reload firewalld"
  become: true

- name: "Setup | Close ports (firewalld-port)"
  ansible.posix.firewalld:
    port: "{{ item.name }}/{{ item.protocol | default(system_firewall_setup_default_protocol) }}"
    permanent: true
    state: "disabled"
  loop: "{{ system_firewall_setup_  }}"
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_  is defined
    - system_firewall_setup_service == "firewalld"
    - item.name is number
    - item.state is defined
    - item.state == "absent"
  loop_control:
    label: "{{ item.name }}"
  notify:
    - "Reload firewalld"
  become: true

- name: "Setup | Open ports (firewalld-service)"
  ansible.posix.firewalld:
    service: "{{ item.name }}"
    permanent: true
    state: "enabled"
  loop: "{{ system_firewall_setup_  }}"
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_  is defined
    - system_firewall_setup_service == "firewalld"
    - item.name is not number
  loop_control:
    label: "{{ item.name }}"
  notify:
    - "Reload firewalld"
  become: true

- name: "Setup | Close ports (firewalld-service)"
  ansible.posix.firewalld:
    service: "{{ item.name }}"
    permanent: true
    state: "disabled"
  loop: "{{ system_firewall_setup_  }}"
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_  is defined
    - system_firewall_setup_service == "firewalld"
    - item.name is not number
    - item.state is defined
    - item.state == "absent"
  loop_control:
    label: "{{ item.name }}"
  notify:
    - "Reload firewalld"
  become: true

- name: "Setup | Enable ufw"
  community.general.ufw:
    state: "enabled"
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_service == "ufw"
  become: true

- name: "Setup | Configure iptables"
  ansible.builtin.template:
    src: "templates/setup/iptables.j2"
    dest: "{{ system_firewall_setup_iptables_rulefile }}"
    validate: "iptables-restore --test %s"
    mode: "0640"
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_  is defined
    - system_firewall_setup_service == "iptables"
  loop_control:
    label: "{{ item.name }}"
  notify:
    - "Reload firewall"
  become: true

- name: "Setup | Start and enable firewall service"
  ansible.builtin.service:
    name: "{{ system_firewall_setup_service }}"
    state: "started"
    enabled: true
  when:
    - ansible_connection not in [ "container", "docker", "community.docker.docker" ]
    - system_firewall_setup_service is defined
  become: true

...
