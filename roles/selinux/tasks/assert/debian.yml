---
- name: "Assert | test if system_selinux_state is set correctly"
  ansible.builtin.assert:
    that:
      - system_selinux_state is defined
      - system_selinux_state is string
      - system_selinux_state in [ "disabled", "enforcing", "permissive" ]
    quiet: true

- name: "Assert | test if system_selinux_policy is set correctly"
  ansible.builtin.assert:
    that:
      - system_selinux_policy is defined
      - system_selinux_policy is string
      - system_selinux_policy in [ "default", "minimum", "mls", "targeted" ]
    quiet: true

- name: "Assert | test if system_selinux_reboot is set correctly"
  ansible.builtin.assert:
    that:
      - system_selinux_reboot is defined
      - system_selinux_reboot is boolean
    quiet: true

- name: "Assert | test if system_selinux_booleans is set correctly"
  ansible.builtin.assert:
    that:
      - system_selinux_booleans is iterable
    quiet: true
  when:
    - system_selinux_booleans is defined

- name: "Assert | test if item.name in system_selinux_booleans is set correctly"
  ansible.builtin.assert:
    that:
      - item.name is defined
      - item.name is string
    quiet: true
  loop: "{{ system_selinux_booleans }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - system_selinux_booleans is defined

- name: "Assert | test if item.state in system_selinux_booleans is set correctly"
  ansible.builtin.assert:
    that:
      - item.state is boolean
    quiet: true
  loop: "{{ system_selinux_booleans }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - system_selinux_booleans is defined
    - item.state is defined

- name: "Assert | test if item.persistent in system_selinux_booleans is set correctly"
  ansible.builtin.assert:
    that:
      - item.persistent is boolean
    quiet: true
  loop: "{{ system_selinux_booleans }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - system_selinux_booleans is defined
    - item.persistent is defined

...
