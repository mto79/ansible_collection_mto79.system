---
- name: "Setup | Group | Check that the group is present"
  ansible.builtin.getent:
    database: "group"
    key: "{{ group.name }}"
  failed_when: false
  become: true

- name: "Setup | Group | Check that the group is present | debug"
  ansible.builtin.debug:
    var: ansible_facts['getent_group']

- name: "Setup | Group | Check if group in local /etc/group"
  ansible.builtin.lineinfile:
    dest: "/etc/group"
    line: "{{ group.name }}"
  check_mode: true
  register: "system_users_setup_group_presence"
  become: true

- name: "Setup | Group | Check if group in local /etc/group | debug"
  ansible.builtin.debug:
    var: "system_users_setup_group_presence"

- name: "Setup | Group | Manage group {{ group.name }}"
  ansible.builtin.group:
    name: "{{ group.name }}"
    state: "{{ group.state | default('present') }}"
    gid: "{{ group.gid | default(omit) }}"
    system: "{{ group.system | default(omit) }}"
    local: true
  become: true

- name: "Setup | Group | Set sudo options for {{ group.name }}"
  ansible.builtin.template:
    src: "templates/setup/sudo_group.j2"
    dest: '/etc/sudoers.d/{{ group.name | replace(".", "dot") }}_group'
    mode: "0640"
    validate: /usr/sbin/visudo -cf %s
  when:
    - group.sudo_options is defined
  loop_control:
    label: "{{ group.name }}"
  become: true

- name: "Setup | Group | Remove sudo options for {{ group.name }}"
  ansible.builtin.file:
    path: '/etc/sudoers.d/{{ group.name | replace(".", "dot") }}_group'
    state: "absent"
  when:
    - group.sudo_options is not defined
  loop_control:
    label: "{{ group.name }}"
  become: true

- name: "Setup | Group | Ensure the sudoers.d directory is checked for group sudoers files (will be put after EOF if not exists)"
  ansible.builtin.lineinfile:
    path: "/etc/sudoers"
    state: "present"
    line: "#includedir /etc/sudoers.d"
  become: true

...
